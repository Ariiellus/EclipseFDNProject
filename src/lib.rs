use bytemuck::{Pod, Zeroable};
use solana_program::{
    account_info::AccountInfo,
    clock::Clock,
    entrypoint::ProgramResult,
    keccak::hashv,
    msg,
    program::{invoke, invoke_signed},
    program_error::ProgramError,
    pubkey::Pubkey,
    system_instruction, system_program,
    sysvar::Sysvar,
};

pub mod f {
    use solana_program::declare_id;
    declare_id!("EGJnqcxVbhJFJ6Xnchtaw8jmPSvoLXfN2gWsY9Etz5SZ");
}

pub const AI: [u32; 1287] = [
    2097151, 3080450, 3604741, 3867139, 3998472, 4064262, 5242879, 5701893, 5964291, 6095624,
    6161414, 6750468, 7012867, 7144200, 7209990, 7537156, 7668488, 7734278, 7930115, 7996422,
    8127237, 9372674, 9896197, 10158595, 10289928, 10355718, 10945538, 11207171, 11338504,
    11404294, 11731970, 11862792, 11928582, 12189695, 12190726, 12321541, 13042433, 13369343,
    13435656, 13501446, 13828612, 13959944, 14025734, 14221572, 14287878, 14418693, 14877191,
    15008520, 15074310, 15270405, 15336454, 15467269, 15794951, 15860742, 15991560, 16253959,
    17760770, 18284805, 18612223, 18678536, 18744326, 19398655, 19595525, 19727112, 19792902,
    20120068, 20251400, 20317190, 20513283, 20579334, 20710149, 21431298, 21693442, 21824264,
    21890054, 22217220, 22348552, 22414342, 22675455, 22676486, 22807301, 23265799, 23397128,
    23462918, 23659013, 23725062, 23855877, 24183559, 24249350, 24380168, 24642567, 25625346,
    25887490, 26018568, 26084358, 26476543, 26542856, 26608646, 26804485, 26870790, 27001605,
    27460103, 27591432, 27657222, 27853317, 27919366, 28050181, 28377863, 28443654, 28574472,
    28836871, 29557253, 29688584, 29754374, 29950471, 30016518, 30147333, 30475015, 30540806,
    30671624, 30934023, 31523589, 31589382, 31719941, 31982599, 32506630, 34537985, 35127295,
    35324418, 35455752, 35521542, 36111105, 36438015, 36504328, 36570118, 36897283, 37028616,
    37094406, 37290500, 37356550, 37487365, 38208258, 38470402, 38601480, 38667270, 39059455,
    39125768, 39191558, 39387652, 39453702, 39584517, 40043015, 40174344, 40240134, 40436229,
    40502278, 40633093, 40960775, 41026566, 41157384, 41419783, 42402818, 42664962, 42795784,
    42861574, 43189250, 43320072, 43385862, 43646975, 43648006, 43778821, 44237319, 44368648,
    44434438, 44630533, 44696582, 44827397, 45155079, 45220870, 45351688, 45614087, 46334469,
    46465800, 46531590, 46727687, 46793734, 46924549, 47252231, 47318022, 47448840, 47711239,
    48300805, 48366598, 48497157, 48759815, 49283846, 50791172, 51053316, 51184392, 51250182,
    51577604, 51708680, 51774470, 51970819, 52036614, 52167429, 52626180, 52757256, 52823046,
    53084159, 53085190, 53216005, 53543687, 53609478, 53740548, 54002695, 54788095, 54854408,
    54920198, 55116295, 55182342, 55313157, 55640839, 55706630, 55837700, 56099847, 56689413,
    56755206, 56950783, 57148423, 57672454, 58917892, 59048712, 59114502, 59311108, 59376646,
    59572223, 59835143, 59900934, 60031752, 60294151, 60948479, 60949510, 61079814, 61342727,
    61866758, 62980870, 63046662, 63177479, 63439879, 63963912, 65012230, 68092676, 68616964,
    68879108, 69010184, 69075974, 69665540, 69927684, 70058760, 70124550, 70451972, 70583048,
    70648838, 70845189, 70910982, 71041539, 71762692, 72024836, 72155912, 72221702, 72549124,
    72680200, 72745990, 72942341, 73008134, 73203711, 73597700, 73728776, 73794566, 73990917,
    74056710, 74187268, 74515207, 74580998, 74711816, 74974215, 75956996, 76219140, 76350216,
    76416006, 76743428, 76874504, 76940294, 77136645, 77202438, 77333251, 77792004, 77923080,
    77988870, 78185221, 78251014, 78446591, 78709511, 78775302, 78906120, 79168519, 79953919,
    80020232, 80086022, 80282373, 80348166, 80478725, 80806663, 80872454, 81003272, 81265671,
    81854984, 81921030, 82051845, 82314247, 82838278, 84345602, 84607746, 84738824, 84804614,
    85196799, 85263112, 85328902, 85525253, 85591046, 85721860, 86180359, 86311688, 86377478,
    86573829, 86639622, 86770436, 87098119, 87163910, 87294728, 87557127, 88278274, 88408840,
    88474630, 88670981, 88736774, 88932351, 89195271, 89261062, 89391880, 89654279, 90243592,
    90309638, 90440453, 90702855, 91226886, 92472322, 92603144, 92668934, 92930047, 92931078,
    93062148, 93389575, 93455366, 93586184, 93848583, 94438658, 94503942, 94699519, 94897159,
    95421190, 96535302, 96601094, 96731911, 96994311, 97518344, 98566662, 101123333, 101385477,
    101516040, 101581830, 101909765, 102040328, 102106118, 102302981, 102368262, 102499589,
    102958341, 103088904, 103154694, 103351557, 103416838, 103548165, 103875845, 103941126,
    104072453, 104334597, 105055493, 105186056, 105251846, 105448709, 105513990, 105645317,
    105972997, 106038278, 106169605, 106431749, 107021573, 107086854, 107218181, 107480325,
    108004613, 109249797, 109380360, 109446150, 109643013, 109708294, 109839621, 110167301,
    110232582, 110363909, 110626053, 111215877, 111281158, 111412485, 111674629, 112198917,
    113313029, 113378310, 113509637, 113771781, 114296069, 115408895, 117638149, 117768968,
    117834758, 118031365, 118096902, 118228228, 118555399, 118621190, 118752008, 119014407,
    119604229, 119669766, 119801092, 120062983, 120651775, 121765887, 121766918, 121897735,
    122160135, 122684168, 123732487, 125895937, 126025727, 126091783, 126354439, 126878471,
    127927048, 130023687, 135202054, 135726342, 135988486, 136119048, 136185094, 136774918,
    137037062, 137167624, 137233670, 137561350, 137691912, 137757958, 137954566, 138020102,
    138151174, 138872070, 139134214, 139264776, 139330822, 139658502, 139789064, 139855110,
    140051718, 140117254, 140248326, 140707078, 140837640, 140903686, 141100294, 141165830,
    141296902, 141624582, 141690118, 141821190, 142083334, 143066374, 143328518, 143459080,
    143525126, 143852806, 143983368, 144049414, 144246022, 144311558, 144442630, 144901382,
    145031944, 145097990, 145294598, 145360134, 145491206, 145818886, 145884422, 146015494,
    146277638, 146998534, 147129096, 147195142, 147391750, 147457286, 147588358, 147916038,
    147981574, 148112646, 148374790, 148964614, 149030150, 149161222, 149423366, 149947654,
    151454982, 151717126, 151847688, 151913734, 152241414, 152371976, 152438022, 152634630,
    152700166, 152831238, 153289990, 153420552, 153486598, 153683206, 153748742, 153879814,
    154207494, 154273030, 154404102, 154666246, 155387142, 155517704, 155583750, 155780358,
    155845894, 155976966, 156304646, 156370182, 156501254, 156763398, 157353222, 157418758,
    157549830, 157811974, 158336262, 159581446, 159712008, 159778054, 159974662, 160040198,
    160171270, 160498950, 160564486, 160695558, 160957702, 161547526, 161613062, 161744134,
    162006278, 162530566, 163644678, 163710214, 163841286, 164103430, 164627718, 165676294,
    168232198, 168494342, 168624904, 168690950, 169018630, 169149192, 169215238, 169411846,
    169477382, 169608454, 170067206, 170197768, 170263814, 170460422, 170525958, 170657030,
    170984710, 171050246, 171181318, 171443462, 172164358, 172294920, 172360966, 172557574,
    172623110, 172754182, 173081862, 173147398, 173278470, 173540614, 174130438, 174195974,
    174327046, 174589190, 175113478, 176358662, 176489224, 176555270, 176751878, 176817414,
    176948486, 177276166, 177341702, 177472774, 177734918, 178324742, 178390278, 178521350,
    178783494, 179307782, 180421894, 180487430, 180618502, 180880646, 181404934, 182453510,
    184747270, 184877832, 184943878, 185140486, 185206022, 185337094, 185664774, 185730310,
    185861382, 186123526, 186713350, 186778886, 186909958, 187172102, 187696390, 188810502,
    188876038, 189007110, 189269254, 189793542, 190842118, 193004806, 193070342, 193201414,
    193463558, 193987846, 195036422, 197197823, 201786115, 202048259, 202179336, 202245125,
    202572547, 202703624, 202769413, 202965764, 203031304, 203162630, 203685887, 203752200,
    203817989, 204014340, 204079880, 204211206, 204538631, 204604421, 204735494, 204997639,
    205718530, 205849352, 205915141, 206176255, 206177032, 206308358, 206635783, 206701573,
    206832646, 207094791, 207684104, 207749895, 207881222, 208143367, 208667397, 209913092,
    210043656, 210109445, 210306308, 210371336, 210502662, 210830087, 210895877, 211026950,
    211289095, 211879172, 211944199, 212075526, 212337671, 212926463, 213976321, 214106111,
    214172678, 214434823, 214958856, 216007430, 218301701, 218432264, 218498309, 218694917,
    218759944, 218891270, 219218695, 219284741, 219415558, 219677703, 220267781, 220332807,
    220464134, 220726279, 221250821, 222364933, 222430469, 222561286, 222823431, 223347973,
    224460799, 226559234, 226624770, 226820095, 227017735, 227541767, 228590344, 230686984,
    235078659, 235209480, 235275268, 235471875, 235537160, 235668485, 236060671, 236061700,
    236192520, 236454919, 237044993, 237174783, 237241349, 237503495, 238027782, 239142146,
    239207682, 239403007, 239600647, 240124934, 241172744, 243336452, 243401988, 243533060,
    243794951, 244383743, 245367560, 247464456, 251725059, 251790595, 251921667, 252248063,
    252707080, 253755912, 255853320, 260047880, 269419525, 269943813, 270205957, 270336776,
    270402309, 270992389, 271254533, 271385352, 271450885, 271778821, 271909640, 271975173,
    272172037, 272237320, 272368646, 273089541, 273351685, 273482504, 273548037, 273875973,
    274006792, 274072325, 274269189, 274334472, 274465798, 274924549, 275055368, 275120901,
    275317765, 275383048, 275514374, 275842053, 275907076, 276038662, 276300550, 277283845,
    277545989, 277676808, 277742341, 278070277, 278201096, 278266629, 278463493, 278528776,
    278660102, 279118853, 279249672, 279315205, 279512069, 279577352, 279708678, 280036357,
    280166399, 280232966, 280494854, 281216005, 281346824, 281412357, 281609221, 281674504,
    281805830, 282133509, 282198533, 282330118, 282592006, 283182085, 283247110, 283378694,
    283640584, 284165127, 285672453, 285934597, 286065416, 286130949, 286458885, 286589704,
    286655237, 286852101, 286917384, 287048710, 287507461, 287638280, 287703813, 287900677,
    287965960, 288097286, 288424965, 288490244, 288621574, 288883462, 289604613, 289735432,
    289800965, 289997829, 290063112, 290194438, 290522117, 290652159, 290718726, 290980614,
    291570693, 291635718, 291767302, 292029192, 292553735, 293798917, 293929736, 294060031,
    294192133, 294257416, 294388742, 294716421, 294781446, 294913030, 295174918, 295764997,
    295830024, 295961606, 296223496, 296748039, 297926655, 297927430, 298058758, 298320390,
    298845191, 299893511, 302449411, 302711555, 302842632, 302908420, 303235843, 303366920,
    303432708, 303629061, 303694600, 303825926, 304349183, 304415496, 304481284, 304677637,
    304743176, 304874502, 305201924, 305267716, 305398790, 305660933, 306381827, 306512648,
    306577928, 306774789, 306840328, 306971654, 307363839, 307364868, 307495942, 307758085,
    308347654, 308477951, 308544518, 308806408, 309330951, 310576130, 310706952, 310772739,
    311033855, 311034632, 311165958, 311493889, 311623679, 311690246, 311952389, 312541958,
    312607240, 312738822, 313000712, 313525255, 314639619, 314704646, 314835974, 315162623,
    315622407, 316670727, 318964740, 319095560, 319161349, 319357448, 319423240, 319554566,
    319882244, 319947781, 320078854, 320405503, 320995327, 320996357, 321127430, 321389320,
    321913863, 323028225, 323158015, 323224582, 323486216, 324011015, 325059335, 327222530,
    327288066, 327483391, 327680775, 328205319, 329253640, 331350535, 336004358, 336266502,
    336397064, 336463110, 336790790, 336921352, 336987398, 337184006, 337249032, 337380614,
    337839366, 337969928, 338035974, 338232582, 338297608, 338429190, 338756870, 338822406,
    338953478, 339215622, 339936518, 340067080, 340133126, 340329734, 340394760, 340526342,
    340854022, 340919558, 341050630, 341312774, 341902598, 341968134, 342099206, 342361350,
    342885638, 344130822, 344261384, 344327430, 344524038, 344589064, 344720646, 345048326,
    345113862, 345244934, 345507078, 346096902, 346162438, 346293510, 346555654, 347079942,
    348194054, 348259590, 348390662, 348652806, 349177094, 350225670, 352519430, 352649992,
    352716038, 352912646, 352977672, 353109254, 353436934, 353502470, 353633542, 353895686,
    354485510, 354551046, 354682118, 354944262, 355468550, 356582662, 356648198, 356779270,
    357041414, 357565702, 358614278, 360776966, 360842502, 360973574, 361235718, 361760006,
    362808582, 364969983, 369296645, 369427208, 369493253, 369689861, 369754888, 369886469,
    370214149, 370279685, 370410248, 370672646, 371262725, 371328261, 371459333, 371720968,
    372245511, 373359877, 373425413, 373556485, 373818374, 374342663, 375455743, 377554179,
    377619715, 377750787, 378077183, 378536967, 379585288, 381682184, 385942788, 386008324,
    386139396, 386401540, 386990079, 387973640, 390071048, 394265608, 403112964, 403375108,
    403505928, 403571460, 403899396, 404030216, 404095748, 404292358, 404357896, 404489221,
    404947972, 405078792, 405144324, 405340934, 405406472, 405537797, 405865476, 405930758,
    406061832, 406323973, 407045124, 407175944, 407306239, 407438086, 407503624, 407634949,
    407962628, 408027910, 408158984, 408421125, 409075711, 409076485, 409207813, 409469704,
    409994246, 411239683, 411370248, 411436036, 411632390, 411697928, 411829253, 412157187,
    412222214, 412353288, 412680191, 413205761, 413335551, 413402117, 413664008, 414188550,
    415302914, 415368450, 415563775, 415761158, 416285702, 417334279, 419628034, 419758856,
    419824643, 420085759, 420086536, 420217860, 420545793, 420675583, 420741896, 421004293,
    421594370, 421659906, 421855231, 422052616, 422577158, 423691523, 423757059, 423888131,
    424214527, 424674310, 425722887, 427885828, 427951364, 428082436, 428344580, 428933119,
    429917191, 432014087, 436405510, 436536072, 436602118, 436798726, 436863752, 436995334,
    437323014, 437388550, 437519112, 437781766, 438371590, 438437126, 438568198, 438830342,
    439354630, 440468742, 440534278, 440665350, 440927494, 441451782, 442500358, 444663046,
    444728582, 444859654, 445121798, 445646086, 446694662, 448856063, 453051653, 453117189,
    453248261, 453510405, 454034693, 455147519, 457179912, 461374472, 469959681, 470155263,
    470156290, 470353153, 470482943, 470549507, 470877442, 470942978, 471138303, 471335940,
    471926019, 471991555, 472122627, 472449023, 472908805, 474023172, 474088708, 474219780,
    474481924, 475070463, 476054534, 478217477, 478283013, 478414085, 478676229, 479200517,
    480313343, 482345991, 486606086, 486671622, 486802694, 487064838, 487589126, 488637702,
    490799103, 494928904, 503383303, 503448839, 503579911, 503842055, 504366343, 505414919,
    507512071, 511770623, 520159231,
];

const B: [u8; 8] = [0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE, 0xFF];
const M: [u8; 8] = [0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01];
const M8: u32 = 0xFF;
const M16: u32 = 0xFF00;

#[repr(C)]
#[derive(Pod, Zeroable, Clone, Copy)]
pub struct G {
    s: [u8; 5],
    _p: [u8; 3],
}

impl G {
    pub fn new() -> G {
        G {
            s: [0; 5],
            _p: [0; 3],
        }
    }

    pub fn reset(&mut self) {
        self.s = [0; 5];
    }

    pub fn p(&self) {
        self.s.iter().for_each(|r| {
            println!("{:08b}", r);
        });
    }

    pub fn valid(&self, r: usize, c: usize) -> bool {
        self.s[r - 1] & M[c - 1] == 0
    }

    pub fn x_wins(&self) -> bool {
        self.s.iter().all(|r| *r == 0xFF)
    }

    pub fn o_wins(&self) -> bool {
        self.s.iter().take(4).all(|r| *r == 0xFF) && self.s[4] == 0xFE
    }

    pub fn x(&mut self, r: usize, c: usize) {
        (0..r).for_each(|i| {
            self.s[i] |= B[c - 1];
        });
    }

    pub fn o(&mut self, entropy: &[u8]) {
        let mut p = 0_u16;
        let mut t = 8;
        self.s.iter().for_each(|r| {
            let ones = r.leading_ones();
            if t > ones {
                p <<= t - ones;
                t = ones;
            }
            p <<= 1;
            p |= 1;
        });
        p <<= t;
        let m = AI[AI
            .binary_search_by(|x| ((*x >> 16) as u16).cmp(&p))
            .unwrap()];

        let (r, c) = ((m & M16) >> 8, m & M8);
        if r == 0xFF && c == 0xFF {
            let options = self
                .s
                .iter()
                .enumerate()
                .filter(|(_, r)| r.trailing_zeros() > 0)
                .map(|(r, c)| (r + 1, (c.leading_ones() + 1) as usize))
                .collect::<Vec<_>>();

            let index = u64::from_le_bytes(hashv(&[entropy, &self.s]).0[..8].try_into().unwrap());
            let (r, c) = options[index as usize % options.len()];

            assert!(
                self.valid(r as usize, c as usize),
                "Invalid move {} {}",
                r,
                c
            );
            msg!("Opponent Move: {} {}", r, c);
            self.x(r as usize, c as usize as usize)
        } else {
            assert!(
                self.valid(r as usize, c as usize),
                "Invalid move {} {}",
                r,
                c
            );
            msg!("Opponent Move: {} {}", r, c);
            self.x(r as usize, c as usize as usize)
        }
    }
}

#[cfg(not(feature = "no-entrypoint"))]
solana_program::entrypoint!(process_instruction);

#[track_caller]
#[inline(always)]
pub fn assert_with_msg(v: bool, err: impl Into<ProgramError>, msg: &str) -> ProgramResult {
    if v {
        Ok(())
    } else {
        let caller = std::panic::Location::caller();
        msg!("{}. \n{}", msg, caller);
        Err(err.into())
    }
}

pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let system_program = &accounts[0];
    let player = &accounts[1];
    let game = &accounts[2];
    let fee_collector = &accounts[3];
    assert_with_msg(
        *system_program.key == system_program::id(),
        ProgramError::InvalidArgument,
        "Invalid system program",
    )?;
    assert_with_msg(
        player.is_signer && player.is_writable,
        ProgramError::InvalidArgument,
        "Player must be a signer and writable",
    )?;
    let (game_key, bump) = Pubkey::find_program_address(&[player.key.as_ref()], program_id);
    assert_with_msg(
        *game.key == game_key && game.is_writable,
        ProgramError::InvalidArgument,
        "Invalid game account",
    )?;
    assert_with_msg(
        *fee_collector.key == f::id() && fee_collector.is_writable,
        ProgramError::InvalidArgument,
        "Invalid fee collector account",
    )?;

    if game.data_is_empty() {
        let current_lamports = **game.try_borrow_lamports()?;
        if current_lamports == 0 {
            invoke_signed(
                &system_instruction::create_account(player.key, game.key, 1_000_000, 8, program_id),
                &accounts.clone(),
                &[&[player.key.as_ref(), &[bump]]],
            )?;
        } else {
            // Fund the account for rent exemption.
            let required_lamports = 1_000_000_u64.saturating_sub(current_lamports);
            if required_lamports > 0 {
                invoke(
                    &system_instruction::transfer(player.key, game.key, required_lamports),
                    &accounts.clone(),
                )?;
            }
            // Allocate space.
            invoke_signed(
                &system_instruction::allocate(game.key, 8),
                &[game.clone(), system_program.clone()],
                &[&[player.key.as_ref(), &[bump]]],
            )?;
            // Assign to the specified program
            invoke_signed(
                &system_instruction::assign(game.key, program_id),
                &[game.clone(), system_program.clone()],
                &[&[player.key.as_ref(), &[bump]]],
            )?;
        }
    }

    let mut data = game.data.borrow_mut();
    let g: &mut G = bytemuck::try_from_bytes_mut(&mut data[..8]).unwrap();

    assert_with_msg(
        instruction_data.len() == 1,
        ProgramError::InvalidInstructionData,
        "",
    )?;

    let tag = instruction_data[0];
    let (r, c) = (tag >> 4, tag & 0xF);
    let has_made_moves = g.s.iter().any(|r| *r != 0);
    if r == 0 && c == 0 && has_made_moves {
        drop(g);
        drop(data);
        let destination_starting_lamports = fee_collector.lamports();
        **fee_collector.lamports.borrow_mut() = destination_starting_lamports
            .checked_add(game.lamports())
            .ok_or(ProgramError::InsufficientFunds)?;
        **game.lamports.borrow_mut() = 0;
        game.assign(&system_program::id());
        game.realloc(0, false)?;
        return Ok(());
    }

    assert_with_msg(
        r <= 5 && c <= 8,
        ProgramError::InvalidInstructionData,
        "Invalid move",
    )?;
    assert_with_msg(
        r > 0 && c > 0,
        ProgramError::InvalidInstructionData,
        "Invalid move",
    )?;

    if !g.valid(r as usize, c as usize) {
        msg!("Invalid move");
        return Err(ProgramError::InvalidInstructionData);
    }

    let entropy = [player.key.as_ref(), &Clock::get()?.slot.to_le_bytes()].concat();

    g.x(r as usize, c as usize);
    g.o(&entropy);

    let x_wins = g.x_wins();
    let o_wins = g.o_wins();
    drop(g);
    drop(data);

    if x_wins {
        msg!("You win!");
        let destination_starting_lamports = player.lamports();
        **player.lamports.borrow_mut() = destination_starting_lamports
            .checked_add(game.lamports())
            .ok_or(ProgramError::InsufficientFunds)?;
        **game.lamports.borrow_mut() = 0;
        game.assign(&system_program::id());
        game.realloc(0, false)?;
        return Ok(());
    }

    if o_wins {
        msg!("You lose!");
        let destination_starting_lamports = fee_collector.lamports();
        **fee_collector.lamports.borrow_mut() = destination_starting_lamports
            .checked_add(game.lamports())
            .ok_or(ProgramError::InsufficientFunds)?;
        **game.lamports.borrow_mut() = 0;
        game.assign(&system_program::id());
        game.realloc(0, false)?;
        return Ok(());
    }

    Ok(())
}
